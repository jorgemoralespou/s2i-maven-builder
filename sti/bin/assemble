#!/bin/bash
#
# Source directory can have:
#  pom.xml
#  files and directories with source code
#  configuration/...   Configuration folder (where one can leave a custom settings.xml file or any other configuration file for destination)
#
#
# Destination directory (/output) will have:
#   artifact files
#   configuration/... Configuration files copied from source configuration folder
#

# Handle source locations that might be a symlink (ref: http://bit.ly/2kcvSCS)
_SOURCE="${BASH_SOURCE[0]}"
while [ -h "$_SOURCE" ]; do # resolve $_SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$_SOURCE" )" && pwd )"
  SOURCE="$(readlink "$_SOURCE")"
  [[ $_SOURCE != /* ]] && _SOURCE="$DIR/$_SOURCE" # if $_SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$_SOURCE" )" && pwd )"

# This is where s2i will leave the saved artifacts and the uploaded src
export DESTINATION=/opt/s2i/destination
mkdir -p $DESTINATION
# This is the working dir
HOME=/opt/app-root/src
export LOCAL_SOURCE_DIR=${HOME}
mkdir -p $HOME
# Resulting artifacts will be deployed to /wildfly/standalone/deployments
export OUTPUT=/output
mkdir -p $DEPLOY_DIR

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.ear, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

# Copy the source for compilation
cp -Rf $DESTINATION/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# Add the script libraries
source $DIR/helpers

#
# Copy configuration
#
SETTINGS=$HOME/.m2/settings-s2i.xml
if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."

  if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ]; then
    mkdir -p $HOME/.m2
    mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
    SETTINGS=$HOME/.m2/settings.xml
  fi

  # Copy all other configuration files to the output folder
  cp -v $LOCAL_SOURCE_DIR/configuration/* $OUTPUT/configuration/
fi
# Configure the settings.xml file
configure_proxy $SETTINGS
configure_mirrors $SETTINGS
configure_profiles $SETTINGS


# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null
  # TODO: Check why is this alternative?
  JAVA_HOME=/etc/alternatives/java_sdk_1.8.0

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package  -DskipTests -B"
  fi

  # If MAVEN_SETTINGS specified will always add to MAVEN_ARGS
  # Can be relative to application root
  # Can be global to image
  if [ -z "$MAVEN_SETTINGS" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS -s $SETTINGS"
  else
    if [[ "$MAVEN_SETTINGS" = /* ]]; then
       [ ! -e "$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in the image. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $MAVEN_SETTINGS"
    else
       [ ! -e "$LOCAL_SOURCE_DIR/$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in your source code. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/$MAVEN_SETTINGS"
    fi
  fi

  # Append user provided args
  if [ -n "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi

  CONTAINER_HEAP_PERCENT=${CONTAINER_HEAP_PERCENT:-0.50}
  CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`

  DEFAULT_MEMORY_CEILING=$((2**40-1))
  if [ "${CONTAINER_MEMORY_IN_BYTES}" -lt "${DEFAULT_MEMORY_CEILING}" ]; then
    CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
    CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
    JAVA_HEAP_MAX=-Xmx${CONTAINER_HEAP_MAX}
  fi

  if [ -z $JAVA_GC_OPTS ]; then
    # note - MaxPermSize no longer valid with v8 of the jdk ... used to have -XX:MaxPermSize=100m
    JAVA_GC_OPTS="-XX:+UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MaxMetaspaceSize=100m"
  fi
  if [ ! -z "${CONTAINER_CORE_LIMIT}" ]; then
    JAVA_CORE_LIMIT="-XX:ParallelGCThreads=${CONTAINER_CORE_LIMIT} -Djava.util.concurrent.ForkJoinPool.common.parallelism=${CONTAINER_CORE_LIMT} -XX:CICompilerCount=2"
  fi
  if [ ! -z "${USE_JAVA_DIAGNOSTICS}" ]; then
    JAVA_DIAGNOSTICS="-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
  fi

  # When arguments such as max heap size are repeated, the JVM respects the last value provided,
  # so by setting the user provided MAVEN_OPTS value last, we allow the user to override any 
  # of the values we calculated above.
  MAVEN_OPTS=$JAVA_GC_OPTS $JAVA_HEAP_MAX $JAVA_CORE_LIMIT $JAVA_DIAGNOSTICS $MAVEN_OPTS

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  # Print version
  mvn --version
  # Do actual build
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  echo "Moving built artifact files into $OUTPUT for later deployment..."
  popd &> /dev/null
else
  echo "Moving binaries in source directory into $OUTPUT for later deployment..."
  move_artifacts "." war ear rar jar
fi

#
# TODO: Validate below 

# Move built artifacts (if any!) from the target/ directory
# (or $ARTIFACT_DIR if specified)
if [ -d $LOCAL_SOURCE_DIR/$ARTIFACT_DIR ]; then
  move_artifacts "$ARTIFACT_DIR" war ear rar jar
fi

# Copy files and artifacts thatshould be stream to origin to destination images
copy_as_is_dirs

echo "...done"

exit $rc